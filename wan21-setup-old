#!/bin/bash

# === Provisioning Script for WAN 2.1 on Vast.ai with Pinokio Integration ===

# Step 0: Vast.ai environment-specific variables
export PROVISIONING_SCRIPT="https://raw.githubusercontent.com/vast-ai/base-image/refs/heads/main/derivatives/linux-desktop/provisioning_scripts/pinokio.sh"
export SELKIES_ENCODER="x264enc"
export PORTAL_CONFIG="localhost:1111:11111:/:Instance Portal|localhost:6100:16100:/:Selkies Low Latency Desktop|localhost:6200:16200:/guacamole:Apache Guacamole Desktop (VNC)|localhost:8080:8080:/:Jupyter|localhost:8080:8080:/terminals/1:Jupyter Terminal|localhost:8384:18384:/:Syncthing"
export DATA_DIRECTORY="/workspace/"

# Step 1: Install dependencies
apt update && apt install -y \
  git \
  curl \
  wget \
  unzip \
  sudo \
  software-properties-common \
  openssh-client \
  nodejs \
  npm \
  python3-pip \
  jq

pip3 install gradio

# Step 1.5: Check for Pinokio (optional)
if [[ ! -d "/workspace/Pinokio" && ! -d "/root/Pinokio" ]]; then
  echo "⚠️ Pinokio not found in expected locations. Continuing without Pinokio."
fi

# Step 1.6: Pre-install gradio frpc tunnel client as forgeuser
mkdir -p /home/forgeuser/.cache/huggingface/gradio/frpc
wget -q --show-progress -O /home/forgeuser/.cache/huggingface/gradio/frpc/frpc_linux_amd64_v0.3 \
  https://cdn-media.huggingface.co/frpc-gradio-0.3/frpc_linux_amd64
chmod +x /home/forgeuser/.cache/huggingface/gradio/frpc/frpc_linux_amd64_v0.3
chown -R forgeuser:forgeuser /home/forgeuser/.cache

# Step 2: Install .NET SDK 8.0 (skip if already installed)
wget -O /tmp/dotnet-install.sh https://dot.net/v1/dotnet-install.sh
chmod +x /tmp/dotnet-install.sh
/tmp/dotnet-install.sh --version 8.0.100 --install-dir /usr/share/dotnet || echo ".NET install script completed with notice."
ln -sf /usr/share/dotnet/dotnet /usr/bin/dotnet || echo "Symbolic link already exists."

# Step 3: Create forgeuser if it doesn't exist
id -u forgeuser &>/dev/null || useradd -m forgeuser

# Step 4: Clone SwarmUI as forgeuser
rm -rf /workspace/SwarmUI
su forgeuser -c "git clone https://github.com/mcmonkeyprojects/SwarmUI.git /workspace/SwarmUI"

# Step 5: Build SwarmUI as forgeuser (fallback to build if publish fails)
su forgeuser -c "cd /workspace/SwarmUI && HOME=/home/forgeuser dotnet publish -c Release -o publish" || \
  su forgeuser -c "cd /workspace/SwarmUI && HOME=/home/forgeuser dotnet restore && dotnet build"

# Step 6: Create WAN2.1 model folder and download models
mkdir -p /workspace/SwarmUI/Models/diffusion_models/WAN2.1
cd /workspace/SwarmUI/Models/diffusion_models/WAN2.1

HF_TOKEN="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"

CV_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/clip_vision/clip_vision_h.safetensors"
wget --tries=3 --timeout=30 --header="Authorization: Bearer $HF_TOKEN" -O clip_vision_h.safetensors "$CV_MODEL_URL"

VAE_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/vae/wan_2.1_vae.safetensors"
wget --tries=3 --timeout=30 --header="Authorization: Bearer $HF_TOKEN" -O wan_2.1_vae.safetensors "$VAE_MODEL_URL"

I2V_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_i2v_720p_14B_fp16.safetensors"
wget --tries=3 --timeout=30 --header="Authorization: Bearer $HF_TOKEN" -O wan2.1_i2v_720p_14B_fp16.safetensors "$I2V_MODEL_URL"

T2V_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_t2v_14B_fp16.safetensors"
wget --tries=3 --timeout=30 --header="Authorization: Bearer $HF_TOKEN" -O wan2.1_t2v_14B_fp16.safetensors "$T2V_MODEL_URL"

VACE_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_vace_14B_fp16.safetensors"
wget --tries=3 --timeout=30 --header="Authorization: Bearer $HF_TOKEN" -O wan2.1_vace_14B_fp16.safetensors "$VACE_MODEL_URL"

# Step 6.5: Create launch_gradio.py to wrap SwarmUI endpoints
cat <<EOF > /workspace/SwarmUI/launch_gradio.py
import gradio as gr
import requests

def call_api(endpoint="i2v", prompt="A dog running in the rain"):
    url = f"http://localhost:5000/api/{endpoint}?prompt=" + prompt
    try:
        response = requests.get(url)
        return response.json()
    except Exception as e:
        return {"error": str(e)}

gr.Interface(
    fn=call_api,
    inputs=[
        gr.Dropdown(choices=["i2v", "t2v", "vace"], label="Model"),
        gr.Textbox(label="Prompt")
    ],
    outputs="json",
    title="WAN 2.1 API Gateway"
).launch(share=True, server_name="0.0.0.0", server_port=7860)
EOF

# Step 7: Launch SwarmUI with Gradio wrapper and enforce environment
nohup su forgeuser -c "cd /workspace/SwarmUI && export GRADIO_TEMP_DIR=/home/forgeuser/.cache/gradio && export GRADIO_CACHE_DIR=/home/forgeuser/.cache/gradio && HOME=/home/forgeuser python3 launch_gradio.py" > /workspace/gradio_output.log 2>&1 &

# Step 8: Wait and extract Gradio public URL
sleep 20
PUBLIC_URL=$(grep -o 'https://.*\.gradio\.live' /workspace/gradio_output.log | head -n 1)
export PUBLIC_URL

# Step 9: Save and report to n8n webhook
if [[ -n "$PUBLIC_URL" ]]; then
  echo "$PUBLIC_URL" > /workspace/share_url.txt
  curl -G https://n8n.ifeatuo.com/videohooks \
       -H "Content-Type: application/json" \
       --data-urlencode "share_url=$PUBLIC_URL"
fi

# Step 10: Add background watchdog for bid status
cat <<'EOF' > /workspace/watch_bid.sh
#!/bin/bash
while true; do
  status=$(curl -s http://localhost:1337/status | jq -r '.outbid')
  if [[ "$status" == "true" ]]; then
    echo "Outbid detected. Shutting down."
    shutdown now
  fi
  sleep 60
done
EOF
chmod +x /workspace/watch_bid.sh
nohup bash /workspace/watch_bid.sh > /workspace/watchdog.log 2>&1 &

# Step 11: Add startup commands to rc.local for auto-boot
cat <<'EORC' > /etc/rc.local
#!/bin/bash
su forgeuser -c "cd /workspace/SwarmUI && export GRADIO_TEMP_DIR=/home/forgeuser/.cache/gradio && export GRADIO_CACHE_DIR=/home/forgeuser/.cache/gradio && HOME=/home/forgeuser nohup python3 launch_gradio.py > /workspace/gradio_output.log 2>&1 &"
sleep 20
PUBLIC_URL=$(grep -o "https://.*\.gradio\.live" /workspace/gradio_output.log | head -n 1)
export PUBLIC_URL
if [[ -n "$PUBLIC_URL" ]]; then
  echo "$PUBLIC_URL" > /workspace/share_url.txt
  curl -G https://n8n.ifeatuo.com/videohooks --data-urlencode "share_url=$PUBLIC_URL"
fi
nohup bash /workspace/watch_bid.sh > /workspace/watchdog.log 2>&1 &
exit 0
EORC

chmod +x /etc/rc.local

# End of script
