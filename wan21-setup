#!/bin/bash

# === Provisioning Script for WAN 2.1 on Vast.ai with Pinokio Integration ===

# Step 0: Vast.ai environment-specific variables
export PROVISIONING_SCRIPT="https://raw.githubusercontent.com/vast-ai/base-image/refs/heads/main/derivatives/linux-desktop/provisioning_scripts/pinokio.sh"
export SELKIES_ENCODER="x264enc"
export PORTAL_CONFIG="localhost:1111:11111:/:Instance Portal|localhost:6100:16100:/:Selkies Low Latency Desktop|localhost:6200:16200:/guacamole:Apache Guacamole Desktop (VNC)|localhost:8080:8080:/:Jupyter|localhost:8080:8080:/terminals/1:Jupyter Terminal|localhost:8384:18384:/:Syncthing"
export DATA_DIRECTORY="/workspace/"

# Step 1: Install dependencies
apt update && apt install -y \
  git \
  curl \
  wget \
  unzip \
  sudo \
  software-properties-common \
  openssh-client \
  nodejs \
  npm

# Step 2: Install .NET SDK 8.0 (skip if already installed)
wget -O /tmp/dotnet-install.sh https://dot.net/v1/dotnet-install.sh
chmod +x /tmp/dotnet-install.sh
/tmp/dotnet-install.sh --version 8.0.100 --install-dir /usr/share/dotnet || echo ".NET install script completed with notice."
ln -sf /usr/share/dotnet/dotnet /usr/bin/dotnet || echo "Symbolic link already exists."

# Step 3: Create forgeuser if it doesn't exist
id -u forgeuser &>/dev/null || useradd -m forgeuser

# Step 4: Clone SwarmUI as forgeuser
rm -rf /workspace/SwarmUI
su forgeuser -c "git clone https://github.com/mcmonkeyprojects/SwarmUI.git /workspace/SwarmUI"

# Step 5: Build SwarmUI as forgeuser
su forgeuser -c "cd /workspace/SwarmUI && dotnet publish -c Release -o publish"

# Step 6: Create WAN2.1 model folder and download models
mkdir -p /workspace/SwarmUI/Models/diffusion_models/WAN2.1
cd /workspace/SwarmUI/Models/diffusion_models/WAN2.1

HF_TOKEN="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"

CV_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/clip_vision/clip_vision_h.safetensors"
wget --header="Authorization: Bearer $HF_TOKEN" -O clip_vision_h.safetensors "$CV_MODEL_URL"

VAE_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/vae/wan_2.1_vae.safetensors"
wget --header="Authorization: Bearer $HF_TOKEN" -O wan_2.1_vae.safetensors "$VAE_MODEL_URL"

I2V_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_i2v_720p_14B_fp16.safetensors"
wget --header="Authorization: Bearer $HF_TOKEN" -O wan2.1_i2v_720p_14B_fp16.safetensors "$I2V_MODEL_URL"

T2V_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_t2v_14B_fp16.safetensors"
wget --header="Authorization: Bearer $HF_TOKEN" -O wan2.1_t2v_14B_fp16.safetensors "$T2V_MODEL_URL"

VACE_MODEL_URL="https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_vace_14B_fp16.safetensors"
wget --header="Authorization: Bearer $HF_TOKEN" -O wan2.1_vace_14B_fp16.safetensors "$VACE_MODEL_URL"

# Step 7: Start SwarmUI server in background
nohup su forgeuser -c "cd /workspace/SwarmUI/publish && dotnet SwarmUI.dll" > /workspace/swarmui.log 2>&1 &

# Step 8: Install localtunnel to create Gradio-style public URL
npm install -g localtunnel

# Step 9: Start tunnel and capture public URL
lt --port 7860 --print-requests > /tmp/lt_output.log &
sleep 10
PUBLIC_URL=$(grep -o 'https://[^ ]*' /tmp/lt_output.log | head -n 1)

# Fallback if localtunnel fails
if [[ -z "$PUBLIC_URL" ]]; then
  PUBLIC_URL="http://$(curl -s ifconfig.me):7860"
fi

# Step 10: Save and report to n8n webhook
echo "$PUBLIC_URL" > /workspace/share_url.txt

curl -G https://n8n.ifeatuo.com/videohooks \
     -H "Content-Type: application/json" \
     --data-urlencode "share_url=$PUBLIC_URL"

# End of script
